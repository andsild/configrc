# This is an example file that works with this setup. You should change the
# stuff in <angle brackets>, but keep everything else as is. I've added
# comments to clarify different bits

# General offlineimap configuration
[general]

# Accounts available, separated by comma. Change to whatever you want.
accounts = andsild

# Use the command-line interface. We don't need something fancy
ui = TTY.TTYUI

# A bunch of python functions that are used here.
pythonfile = ~/.mutt/support/offlineimap.py

# Speeds things up. It's OK to loose a mail every now and then, it will get synced next time
fsync = False

# A single account. You can define multiple ones (having different names), but
# you need to list them in [general]
[Account andsild]

# Names of the repositories, defined below.
localrepository = andsild-Local
remoterepository = andsild-Remote

# Hooks to be executed before and after sync
postsynchook = notmuch new

# The local repository
[Repository andsild-Local]

# It's just a Maildir
type = Maildir

# Location of your maildir
localfolders = ~/.mail/andsild

# Gmail folders have long annoying names (like "[Gmail]/All Mail"), so they
# should be renamed locally. This function takes an optional hash with
# mappings. You can leave it empty if you don't need more than the default
# folders.
nametrans = gmail_local_to_remote_nametrans({})

# The remote repository (Gmail)
[Repository andsild-Remote]

# Paralelize work a bit
maxconnections = 2

# Offlineimap supports Gmail, which simplifies a few thing
type = Gmail

# When an email is deleted from a label or directory, it doesn't really get
# deleted from Gmail. Useful if you don't want to accidentally delete a lot of
# stuff.
realdelete = yes

# The email address
remoteuser = andsild@gmail.com

# Fetch the password from the keychain
remotepasseval = keychain_pass()

# Similar renaming to the one in the local repository. It should take the same
# argument (makes it simple to copy/paste around).
nametrans = gmail_remote_to_local_nametrans()

# Don't create tags for local folders, unless you have specified it
# explicitly.
createfolders = False

# Specifies which folders to get from Gmail. If you don't pass any arguments,
# you'll get the default folders.
folderfilter = gmail_folder_filter({})

# Remove this, and offlineimap complains about lack of proper SSL.
sslcacertfile = /etc/ssl/certs/ca-bundle.crt
