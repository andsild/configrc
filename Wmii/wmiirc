#!/usr/bin/env bash
# Configure wmii
wmiiscript=wmiirc # For wmii.sh
. wmii.sh


# Configuration Variables
MODKEY=Mod4
UP=k
DOWN=j
LEFT=h
RIGHT=l

# Bars
noticetimeout=5
noticebar=/rbar/!notice

# Colors tuples: "<text> <background> <border>"
export WMII_NORMCOLORS='#7F7F7F #000000 #81654f'
export WMII_NORMCOLORS='#FFFFFF #000000 #81654f'
export WMII_FOCUSCOLORS='#7F7F7F #000000 #470002'
export WMII_FOCUSCOLORS='#7F7F7F #000000 #BB0006'

export WMII_BACKGROUND='#333333'
export WMII_FONT='-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*'

set -- $(echo $WMII_NORMCOLORS $WMII_FOCUSCOLORS)

if [ -e /etc/NIXOS ]
then
    export WMII_TERM="st -e nix-shell --command 'nvim -c term'"
else
    export WMII_TERM="st"
fi

# Menu history
hist="${WMII_CONFPATH%%:*}/history"
histnum=5000

# Column Rules
wmiir write /colrules <<!
/gimp/ -> 17+83+41
/.*/ ->  68+32 # Golden Ratio
!

# Tagging Rules
# a tilde means that the window will float
#/Spotify.*/ -> +9
wmiir write /rules <<!
/MPlayer|VLC/ floating=on
/Chromium/ allow+=activate
!

# Song status info
songStatus() {
    spotify="$(pidof spotify 1>/dev/null; \
        if [ "$?" -gt 0 ]
        then 
            printf " [[ No song playing ]]";
        else
            dbus-send --print-reply --session --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:'org.mpris.MediaPlayer2.Player' string:'Metadata' \
        | awk '
    BEGIN { songName=""; artist="" }
    {
        if(NR==22) { for(i=2; i<NF+1; i++) { artist  =artist" "$i; } }
        if(NR==39) { for(i=3; i<NF+1; i++) { songName=songName" "$i } }
    }
    END { gsub(/"/,"", artist); gsub(/"/,"",songName);
          print artist":"songName }
    ' ; fi)"

    echo -n label ${spotify}
}


netStatus()
{
    device=$(nmcli  -e yes -t -f DEVICE dev | head -n1)
    upRead="${1}"
    downRead="${2}"
    upRead2=$(head /sys/class/net/${device}/statistics/rx_bytes)
    downRead2=$(head /sys/class/net/${device}/statistics/tx_bytes)
    downkBs=$(( (${upRead2} - ${upRead}) / 1024))
    upkBs=$(( (${downRead2} - ${downRead}) / 1024))

    echo -n label ${downkBs}'/'${upkBs} kB/s $((upRead2 / 1024 / 1024))/$((downRead2 / 1024 / 1024)) MB
        #'|' iwgetid -r
}

# Status Bar Info
status() {
    volume=`amixer sget Master`
    volume="${volume#Simple*\[}"
    volume="${volume%%]*]}"
    memstat="$(awk '
    BEGIN { swap=0; total=0; avail=0; cacheMem }
    {
        if     (NR == 1) { total=int($2 / 1024); }
        else if(NR == 2) { avail=int($2 / 1024); }
        else if(NR == 5) { cacheMem=int($2 / 1024); }
        else if(NR == 6) { swap=int($2 / 1024); }
    }
    END { print cacheMem":"(total-avail)"/"total" MB | "swap" MB" }' \
        /proc/meminfo)"

    topProc=$(ps --user ${USER} hS -o pcpu:4,time,comm:20 --sort=-pcpu | head --lines=1)


    battery=""
    if [ -e "/sys/class/power_supply/BAT0/capacity" ]
    then
        batStatus="$(printf "%.4s" "$(cat /sys/class/power_supply/BAT0/status)" | tr '[A-Z]' '[a-z]')"
        battery="| $(awk ' { if($1>100) { print "100%"; } else { printf("%3d%", $1); } } ' /sys/class/power_supply/BAT0/capacity) ${batStatus}"
    fi

    echo -n label ${topProc} \
        '|' ${memstat} \
        '|' $(awk ' { gsub(".*/", "", $4); print $1, $2, $3, $4 } ' /proc/loadavg) \
        '|' "${volume:-amixer error}" \
        ${battery} \
        '|' $(xkblayout-state print "%s") \
        '|' $(TZ="America/New_York" date +%a\ %b\ %d\ \(%H\)"$(date +%H)":%M:%S\ %Y);
}

echo colors $WMII_NORMCOLORS | wmiir create $noticebar

# Event processing

wi_events <<'!'
# Events
Event CreateTag
    echo colors "$WMII_NORMCOLORS$wi_newline" label "$@" | wmiir create "/lbar/$@"
Event DestroyTag
    wmiir remove "/lbar/$@"
Event FocusTag
    wmiir xwrite "/lbar/$@" colors "$WMII_FOCUSCOLORS"
Event UnfocusTag
    wmiir xwrite "/lbar/$@" colors "$WMII_NORMCOLORS"
Event UrgentTag
    shift
    wmiir xwrite "/lbar/$@" label "*$@"
Event NotUrgentTag
    shift
    wmiir xwrite "/lbar/$@" label "$@"
Event LeftBarClick LeftBarDND
    shift
    wmiir xwrite /ctl view "$@"
Event Unresponsive
    {
        client=$1; shift
        msg="The following client is not responding. What would you like to do?$wi_newline"
        resp=$(wihack -transient $client \
                  xmessage -nearmouse -buttons Kill,Wait -print \
                  -fn "${WMII_FONT%%,*}" "$msg $(wmiir read /client/sel/label)")
        if [ "$resp" = Kill ]; then
            wmiir xwrite /client/$client/ctl slay &
        fi
    }&
Event Notice
    wmiir xwrite $noticebar label $wi_arg

    kill $xpid 2>/dev/null # Let's hope this isn't reused...
    { sleep $noticetimeout; wmiir xwrite $noticebar label; }&
    xpid = $!


Event ClientMouseDown
    wi_fnmenu Client $2 $1 &

Event LeftBarMouseDown
    wi_fnmenu LBar "$@" &

# Actions
# Actions
Action showkeys
    echo "$KeysHelp" | xmessage -file - -fn ${WMII_FONT%%,*}
Action quit
    wmiir xwrite /ctl quit
Action exec
    wmiir xwrite /ctl exec "$@"
Action rehash
    wi_proglist $PATH >$progsfile
Action status
    set +xv
    if wmiir remove /rbar/status 2>/dev/null; then
        sleep 2
    fi
    echo colors "$WMII_NORMCOLORS" | wmiir create /rbar/status
    while status | wmiir write /rbar/status; do
        sleep 1
    done

Action netStatus
    set +xv
    if wmiir remove /rbar/netStatus 2>/dev/null; then
        sleep 2
    fi
    echo colors "$WMII_NORMCOLORS" | wmiir create /rbar/netStatus
    upRead=0
    downRead=0
    while netStatus ${upRead} ${downRead} | wmiir write /rbar/netStatus ; do
        device=$(nmcli  -e yes -t -f DEVICE dev | head -n1)
        upRead=$(head /sys/class/net/${device}/statistics/rx_bytes)
        downRead=$(head /sys/class/net/${device}/statistics/tx_bytes)
        sleep 1
    done
#Action songStatus
    #set +xv
    #if wmiir remove /lbar/songStatus 2>/dev/null; then
        #sleep 2
    #fi
    #echo colors "$WMII_NORMCOLORS" | wmiir create /lbar/songStatus
    #while songStatus | wmiir write /lbar/songStatus; do
        #sleep 7
    #done
# Key Bindings
KeyGroup Moving around
Key $MODKEY-$LEFT   # Select the client to the left
    wmiir xwrite /tag/sel/ctl select left
Key $MODKEY-$RIGHT  # Select the client to the right
    wmiir xwrite /tag/sel/ctl select right
Key $MODKEY-$UP     # Select the client above
    wmiir xwrite /tag/sel/ctl select up
Key $MODKEY-$DOWN   # Select the client below
    wmiir xwrite /tag/sel/ctl select down

Key $MODKEY-Control-$DOWN
        wmiir xwrite /tag/sel/ctl grow sel sel down 5
Key $MODKEY-Control-$UP
        wmiir xwrite /tag/sel/ctl grow sel sel down -5
Key $MODKEY-Control-$LEFT
        wmiir xwrite /tag/sel/ctl grow sel sel right -5
Key $MODKEY-Control-$RIGHT
        wmiir xwrite /tag/sel/ctl grow sel sel right 5

# Move and activate vnc instance (provided it is center left ish on monitor)
Key $MODKEY-a
    action $(wi_actions | wimenu -h "${hist}.actions" -n $histnum) &


Key $MODKEY-space   # Toggle between floating and managed layers
    wmiir xwrite /tag/sel/ctl select toggle

KeyGroup Moving clients around
Key $MODKEY-Shift-$LEFT   # Move selected client to the left
    wmiir xwrite /tag/sel/ctl send sel left; 
Key $MODKEY-Shift-$RIGHT  # Move selected client to the right
    wmiir xwrite /tag/sel/ctl send sel right; 
Key $MODKEY-Shift-$UP     # Move selected client up
    wmiir xwrite /tag/sel/ctl send sel up
Key $MODKEY-Shift-$DOWN   # Move selected client down
    wmiir xwrite /tag/sel/ctl send sel down

Key $MODKEY-Shift-space   # Toggle selected client between floating and managed layers
    wmiir xwrite /tag/sel/ctl send sel toggle

KeyGroup Client actions
Key $MODKEY-f # Toggle selected client's fullsceen state
    wmiir xwrite /client/sel/ctl Fullscreen toggle
Key $MODKEY-Shift-c # Close client
    wmiir xwrite /client/sel/ctl kill

KeyGroup Changing column modes
Key $MODKEY-d # Set column to default mode
    wmiir xwrite /tag/sel/ctl colmode sel default-max
Key $MODKEY-s # Set column to stack mode
    wmiir xwrite /tag/sel/ctl colmode sel stack-max
Key $MODKEY-m # Set column to max mode
    wmiir xwrite /tag/sel/ctl colmode sel stack+max

KeyGroup Running programs
Key $MODKEY-c
    eval wmiir setsid chromium &
Key $MODKEY-p # I would use compgen, if nixos permitted me :(
    eval wmiir setsid $(find /run/current-system/sw/bin/ .nix-profile/bin/  -not -type d -printf "%f\n" | sort | dmenu) &
Key $MODKEY-u      
    eval wmiir setsid uzbl-browser &

Key $MODKEY-Return 
    eval wmiir setsid $WMII_TERM &

KeyGroup Other
Key $MODKEY-Control-t # Toggle all other key bindings
    case $(wmiir read /keys | wc -l | tr -d ' \t\n') in
    0|1)
        echo -n "$Keys" | wmiir write /keys
        wmiir xwrite /ctl grabmod $MODKEY;;
    *)
        wmiir xwrite /keys $MODKEY-Control-t
        wmiir xwrite /ctl grabmod Mod3;;
    esac

KeyGroup Tag actions
!
    for i in 0 1 2 3 4 5 6 7 8 9; do 
    cat <<!
Key $MODKEY-$i       # Move to the numbered view
    wmiir xwrite /ctl view "$i"
Key $MODKEY-Shift-$i     # Retag selected client with the numbered tag
    wmiir xwrite /client/sel/tags "$i"
!
done
wi_events -e
# WM Configuration
wmiir write /ctl <<!
    font $WMII_FONT
    focuscolors $WMII_FOCUSCOLORS
    normcolors $WMII_NORMCOLORS
    grabmod $MODKEY
    border 1
!

# dirty hack to avoid that the wmiirc sourced in /etc/ sets the background after this script is loaded
setsid $(sleep 1 && echo feh --bg-scale "$(find ~/.images -type f  | sort -R | tail -1)") &

if [ -e "${HOME}/dotfiles/Bash/pdfautoopen" ]
then
    pkill --full pdfautoopen # kill if already open
    setsid ~/dotfiles/Bash/pdfautoopen &
fi
    

if [ -z "$(pidof workrave)" ]
then
    command -v workrave 2>&1 && setsid workrave &
fi

# Misc
progsfile="$(wmiir namespace)/.proglist"
action status &
action netStatus &
action songStatus &
wi_proglist $PATH >$progsfile &
